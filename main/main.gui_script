local dirtylarry = require("dirtylarry.dirtylarry")

HTML = [[
<html>
<head>
    <title>Defold webview</title>
</head>
<body>
Hello World
</body>
</html>
]]


local function webview_callback(self, webview_id, request_id, type, data)
    print("webview_callback", webview_id, request_id)
    if type == webview.CALLBACK_RESULT_URL_OK then
        print("CALLBACK_RESULT_URL_OK")

    elseif type == webview.CALLBACK_RESULT_URL_ERROR then
        print("CALLBACK_RESULT_URL_ERROR")
        print("Failed to load url: " .. tostring(data["url"]))
        print("Error: " .. tostring(data["error"]))

    elseif type == webview.CALLBACK_RESULT_URL_LOADING then
        print("CALLBACK_RESULT_URL_LOADING")
        -- a page is loading
        -- return false to prevent it from loading
        -- return true or nil to continue loading the page
        return true

    elseif type == webview.CALLBACK_RESULT_EVAL_OK then
        print("CALLBACK_RESULT_EVAL_OK")
        print("Eval ok. Result: " .. tostring(data['result']))

    elseif type == webview.CALLBACK_RESULT_EVAL_ERROR then
        print("CALLBACK_RESULT_EVAL_ERROR")
        print("Eval not ok. Request # " .. tostring(request_id))

    else
        print("Unknown callback type: " .. tostring(type))
    end
end

local function webview_available()
    if not webview then
        print("WebView is not available (only available on iOS and Android).")
        return false
    end
    return true
end

local function webview_exists(self)
    if not webview_available() then
        return false
    end
    if not self.webview_id then
        print("WebView has been destroyed. Create it again before calling this")
        return false
    end
    return true
end

local function window_callback(self, event, data)
    if event == window.WINDOW_EVENT_RESIZED then
        self.width = data.width
        self.height = data.height
        webview.set_position(self.webview_id, 0, 0, -1, 300)
    end
end

function init(self)
    msg.post(".", "acquire_input_focus")
    msg.post("@render:", "clear_color", { color = vmath.vector4(1.0) })

    if not webview_available() then return end

    self.webview_id = webview.create(webview_callback)
    webview.set_position(self.webview_id, 0, 0, -1, 300)

    self.width = gui.get_width()
    self.height = gui.get_height()
    window.set_listener(window_callback)
end

function on_input(self, action_id, action)
    dirtylarry:button("button_open", action_id, action, function()
        if not webview_exists(self) then return end

        webview.open(self.webview_id, "https://www.google.com")
    end)

    dirtylarry:button("button_eval", action_id, action, function()
        if not webview_exists(self) then return end

        webview.eval(self.webview_id, "1+1")
    end)

    dirtylarry:button("button_html", action_id, action, function()
        if not webview_exists(self) then return end

        webview.open_raw(self.webview_id, HTML)
    end)
    
    dirtylarry:button("button_show", action_id, action, function()
        if not webview_exists(self) then return end

        webview.set_visible(self.webview_id, 1)
    end)

    dirtylarry:button("button_hide", action_id, action, function()
        if not webview_exists(self) then return end

        webview.set_visible(self.webview_id, 0)
    end)

    dirtylarry:button("button_create", action_id, action, function()
        if not webview_available() then return end
        if self.webview_id then
            print("WebView already created")
            return
        end

        self.webview_id = webview.create(webview_callback)
        webview.set_position(self.webview_id, 0, 0, -1, 300)
    end)

    dirtylarry:button("button_destroy", action_id, action, function()
        if not webview_exists(self) then return end

        webview.destroy(self.webview_id)
        self.webview_id = nil
    end)
end
